using out cluster config: /Users/earlzo/.kube/config&v1.ServiceList{
  TypeMeta: v1.TypeMeta{
    Kind: "",
    APIVersion: "",
  },
  ListMeta: v1.ListMeta{
    SelfLink: "/api/v1/namespaces/douya/services",
    ResourceVersion: "11952684",
    Continue: "",
  },
  Items: []v1.Service{
    v1.Service{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-api",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/services/fairy-api",
        UID: "9a136d3a-019d-11e8-84c1-00163e100620",
        ResourceVersion: "3923892",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
          "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"fairy-api\",\"namespace\":\"douya\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"http\",\"port\":5000}],\"selector\":{\"app\":\"fairy\",\"tier\":\"api\"}}}\n",
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.ServiceSpec{
        Ports: []v1.ServicePort{
          v1.ServicePort{
            Name: "http",
            Protocol: "TCP",
            Port: 5000,
            TargetPort: intstr.IntOrString{
              Type: 0,
              IntVal: 5000,
              StrVal: "",
            },
            NodePort: 0,
          },
        },
        Selector: map[string]string{
          "app": "fairy",
          "tier": "api",
        },
        ClusterIP: "None",
        Type: "ClusterIP",
        ExternalIPs: nil,
        SessionAffinity: "None",
        LoadBalancerIP: "",
        LoadBalancerSourceRanges: nil,
        ExternalName: "",
        ExternalTrafficPolicy: "",
        HealthCheckNodePort: 0,
        PublishNotReadyAddresses: false,
        SessionAffinityConfig: nil,
      },
      Status: v1.ServiceStatus{
        LoadBalancer: v1.LoadBalancerStatus{
          Ingress: nil,
        },
      },
    },
    v1.Service{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-celery",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/services/fairy-celery",
        UID: "064d0f36-f9b8-11e7-a17d-00163e04ab00",
        ResourceVersion: "1711742",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
          "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"fairy-celery\",\"namespace\":\"douya\"},\"spec\":{\"clusterIP\":\"None\",\"selector\":{\"app\":\"fairy\",\"tier\":\"api\"}}}\n",
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.ServiceSpec{
        Ports: nil,
        Selector: map[string]string{
          "app": "fairy",
          "tier": "api",
        },
        ClusterIP: "None",
        Type: "ClusterIP",
        ExternalIPs: nil,
        SessionAffinity: "None",
        LoadBalancerIP: "",
        LoadBalancerSourceRanges: nil,
        ExternalName: "",
        ExternalTrafficPolicy: "",
        HealthCheckNodePort: 0,
        PublishNotReadyAddresses: false,
        SessionAffinityConfig: nil,
      },
      Status: v1.ServiceStatus{
        LoadBalancer: v1.LoadBalancerStatus{
          Ingress: nil,
        },
      },
    },
    v1.Service{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-rpc",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/services/fairy-rpc",
        UID: "06285fd9-f9b8-11e7-a17d-00163e04ab00",
        ResourceVersion: "1711738",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
          "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"fairy-rpc\",\"namespace\":\"douya\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"grpc\",\"port\":6000}],\"selector\":{\"app\":\"fairy\",\"tier\":\"rpc\"}}}\n",
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.ServiceSpec{
        Ports: []v1.ServicePort{
          v1.ServicePort{
            Name: "grpc",
            Protocol: "TCP",
            Port: 6000,
            TargetPort: intstr.IntOrString{
              Type: 0,
              IntVal: 6000,
              StrVal: "",
            },
            NodePort: 0,
          },
        },
        Selector: map[string]string{
          "app": "fairy",
          "tier": "rpc",
        },
        ClusterIP: "None",
        Type: "ClusterIP",
        ExternalIPs: nil,
        SessionAffinity: "None",
        LoadBalancerIP: "",
        LoadBalancerSourceRanges: nil,
        ExternalName: "",
        ExternalTrafficPolicy: "",
        HealthCheckNodePort: 0,
        PublishNotReadyAddresses: false,
        SessionAffinityConfig: nil,
      },
      Status: v1.ServiceStatus{
        LoadBalancer: v1.LoadBalancerStatus{
          Ingress: nil,
        },
      },
    },
    v1.Service{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-webadm",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/services/fairy-webadm",
        UID: "8d42043e-0589-11e8-ac32-00163e04ab00",
        ResourceVersion: "4997468",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
          "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"fairy-webadm\",\"namespace\":\"douya\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"http\",\"port\":5000}],\"selector\":{\"app\":\"fairy\",\"tier\":\"webadm\"}}}\n",
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.ServiceSpec{
        Ports: []v1.ServicePort{
          v1.ServicePort{
            Name: "http",
            Protocol: "TCP",
            Port: 5000,
            TargetPort: intstr.IntOrString{
              Type: 0,
              IntVal: 5000,
              StrVal: "",
            },
            NodePort: 0,
          },
        },
        Selector: map[string]string{
          "app": "fairy",
          "tier": "webadm",
        },
        ClusterIP: "None",
        Type: "ClusterIP",
        ExternalIPs: nil,
        SessionAffinity: "None",
        LoadBalancerIP: "",
        LoadBalancerSourceRanges: nil,
        ExternalName: "",
        ExternalTrafficPolicy: "",
        HealthCheckNodePort: 0,
        PublishNotReadyAddresses: false,
        SessionAffinityConfig: nil,
      },
      Status: v1.ServiceStatus{
        LoadBalancer: v1.LoadBalancerStatus{
          Ingress: nil,
        },
      },
    },
    v1.Service{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-api",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/services/fennec-api",
        UID: "23651074-21ec-11e8-9858-00163e04ab00",
        ResourceVersion: "11795737",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
          "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"fennec-api\",\"namespace\":\"douya\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"http\",\"port\":5000}],\"selector\":{\"app\":\"fennec\",\"tier\":\"api\"}}}\n",
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.ServiceSpec{
        Ports: []v1.ServicePort{
          v1.ServicePort{
            Name: "http",
            Protocol: "TCP",
            Port: 5000,
            TargetPort: intstr.IntOrString{
              Type: 0,
              IntVal: 5000,
              StrVal: "",
            },
            NodePort: 0,
          },
        },
        Selector: map[string]string{
          "app": "fennec",
          "tier": "api",
        },
        ClusterIP: "None",
        Type: "ClusterIP",
        ExternalIPs: nil,
        SessionAffinity: "None",
        LoadBalancerIP: "",
        LoadBalancerSourceRanges: nil,
        ExternalName: "",
        ExternalTrafficPolicy: "",
        HealthCheckNodePort: 0,
        PublishNotReadyAddresses: false,
        SessionAffinityConfig: nil,
      },
      Status: v1.ServiceStatus{
        LoadBalancer: v1.LoadBalancerStatus{
          Ingress: nil,
        },
      },
    },
    v1.Service{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-rpc",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/services/fennec-rpc",
        UID: "23510851-21ec-11e8-9858-00163e04ab00",
        ResourceVersion: "11795735",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
          "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"fennec-rpc\",\"namespace\":\"douya\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"grpc\",\"port\":6000}],\"selector\":{\"app\":\"fennec\",\"tier\":\"rpc\"}}}\n",
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.ServiceSpec{
        Ports: []v1.ServicePort{
          v1.ServicePort{
            Name: "grpc",
            Protocol: "TCP",
            Port: 6000,
            TargetPort: intstr.IntOrString{
              Type: 0,
              IntVal: 6000,
              StrVal: "",
            },
            NodePort: 0,
          },
        },
        Selector: map[string]string{
          "app": "fennec",
          "tier": "rpc",
        },
        ClusterIP: "None",
        Type: "ClusterIP",
        ExternalIPs: nil,
        SessionAffinity: "None",
        LoadBalancerIP: "",
        LoadBalancerSourceRanges: nil,
        ExternalName: "",
        ExternalTrafficPolicy: "",
        HealthCheckNodePort: 0,
        PublishNotReadyAddresses: false,
        SessionAffinityConfig: nil,
      },
      Status: v1.ServiceStatus{
        LoadBalancer: v1.LoadBalancerStatus{
          Ingress: nil,
        },
      },
    },
  },
}
&v1.PodList{
  TypeMeta: v1.TypeMeta{
    Kind: "",
    APIVersion: "",
  },
  ListMeta: v1.ListMeta{
    SelfLink: "/api/v1/namespaces/douya/pods",
    ResourceVersion: "11952684",
    Continue: "",
  },
  Items: []v1.Pod{
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-api-854487bd8f-gxzwl",
        GenerateName: "fairy-api-854487bd8f-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fairy-api-854487bd8f-gxzwl",
        UID: "c6151dbf-210e-11e8-8162-00163e100620",
        ResourceVersion: "11589045",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fairy",
          "pod-template-hash": "4100436849",
          "tier": "api",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fairy-api-854487bd8f\",\"uid\":\"c6103d8c-210e-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11588968\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fairy-api-854487bd8f",
            UID: "c6103d8c-210e-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/m2-fairy:bf117d41",
            Command: nil,
            Args: []string{
              "node",
              "app.js",
            },
            WorkingDir: "",
            Ports: []v1.ContainerPort{
              v1.ContainerPort{
                Name: "",
                HostPort: 0,
                ContainerPort: 5000,
                Protocol: "TCP",
                HostIP: "",
              },
            },
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "NODE_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
              v1.EnvVar{
                Name: "GRPC_HOST",
                Value: "",
                ValueFrom: &v1.EnvVarSource{
                  FieldRef: &v1.ObjectFieldSelector{
                    APIVersion: "v1",
                    FieldPath: "status.hostIP",
                  },
                  ResourceFieldRef: nil,
                  ConfigMapKeyRef: nil,
                  SecretKeyRef: nil,
                },
              },
              v1.EnvVar{
                Name: "GRPC_PORT",
                Value: "6000",
                ValueFrom: nil,
              },
              v1.EnvVar{
                Name: "DEBUG",
                Value: "m2-common*",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "npm",
                    "run",
                    "healthz",
                    "liveness",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 0,
              TimeoutSeconds: 1,
              PeriodSeconds: 10,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            ReadinessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "npm",
                    "run",
                    "healthz",
                    "readiness",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 5,
              TimeoutSeconds: 1,
              PeriodSeconds: 10,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.42",
        PodIP: "172.16.6.90",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/m2-fairy:bf117d41",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/m2-fairy@sha256:8c03bdd9a564bcb5a43612b870f48ca25864864aacf4a5d565cec0618d3b72c8",
            ContainerID: "docker://7571cc9e42309b3278c70ae97fbd7325c94ba75a326173733a4a41834e1c0f18",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-celery-755b55b998-gtw2r",
        GenerateName: "fairy-celery-755b55b998-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fairy-celery-755b55b998-gtw2r",
        UID: "552b30a2-2281-11e8-8162-00163e100620",
        ResourceVersion: "11935048",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fairy",
          "pod-template-hash": "3116116554",
          "tier": "celery",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fairy-celery-755b55b998\",\"uid\":\"5527536e-2281-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11934776\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fairy-celery-755b55b998",
            UID: "5527536e-2281-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy:ea80d10c",
            Command: nil,
            Args: []string{
              "sea",
              "celery",
              "worker",
              "-c",
              "1",
              "-n",
              "fairy@%h",
              "--without-mingle",
              "--without-gossip",
              "--loglevel=debug",
            },
            WorkingDir: "",
            Ports: nil,
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "/bin/bash",
                    "-c",
                    "sea celery inspect ping -d fairy@$HOSTNAME",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 10,
              TimeoutSeconds: 10,
              PeriodSeconds: 30,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            ReadinessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "/bin/bash",
                    "-c",
                    "sea celery inspect ping -d fairy@$HOSTNAME",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 10,
              TimeoutSeconds: 10,
              PeriodSeconds: 20,
              SuccessThreshold: 2,
              FailureThreshold: 2,
            },
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf66kqjv3d5k23lvm7oo",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.38",
        PodIP: "172.16.3.79",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy:ea80d10c",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy@sha256:9fbe171c3f540a5b702ce823c7008fc7b19666855932ae979e5cfc8979c3c8fd",
            ContainerID: "docker://2338cc60661d3101b3f0f4fb975cb559959db652e7d0263ad9df252195632352",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-celery-beat-76d7c4bd4-mqcqw",
        GenerateName: "fairy-celery-beat-76d7c4bd4-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fairy-celery-beat-76d7c4bd4-mqcqw",
        UID: "574f88d5-2281-11e8-8162-00163e100620",
        ResourceVersion: "11934812",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fairy",
          "pod-template-hash": "328370680",
          "tier": "cron",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fairy-celery-beat-76d7c4bd4\",\"uid\":\"574c5267-2281-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11934805\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fairy-celery-beat-76d7c4bd4",
            UID: "574c5267-2281-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy:ea80d10c",
            Command: nil,
            Args: []string{
              "sea",
              "celery",
              "beat",
              "--loglevel=debug",
              "--max-interval=10",
            },
            WorkingDir: "",
            Ports: nil,
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: nil,
            ReadinessProbe: nil,
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Pending",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "False",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "Unschedulable",
            Message: "No nodes are available that match all of the predicates: Insufficient cpu (3), PodToleratesNodeTaints (3).",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "",
        PodIP: "",
        StartTime: nil,
        InitContainerStatuses: nil,
        ContainerStatuses: nil,
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-celery-beat-8fff7545-7lk96",
        GenerateName: "fairy-celery-beat-8fff7545-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fairy-celery-beat-8fff7545-7lk96",
        UID: "1a66876c-1e03-11e8-8162-00163e100620",
        ResourceVersion: "11050039",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fairy",
          "pod-template-hash": "49993101",
          "tier": "cron",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fairy-celery-beat-8fff7545\",\"uid\":\"1a644449-1e03-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"10859085\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fairy-celery-beat-8fff7545",
            UID: "1a644449-1e03-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy:0444084c",
            Command: nil,
            Args: []string{
              "sea",
              "celery",
              "beat",
              "--loglevel=debug",
              "--max-interval=10",
            },
            WorkingDir: "",
            Ports: nil,
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: nil,
            ReadinessProbe: nil,
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf66kqjv3d5k23lvm7on",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.39",
        PodIP: "172.16.4.73",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy:0444084c",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy@sha256:bad30b2316450b0862eab2cce418cd5a933d19172ad160f987ad353fad267729",
            ContainerID: "docker://5884d075b4c82b6dc308eeca87db1d34612870a58587243dd61c68ff46e63171",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-rpc-75d6d4d9fc-hx777",
        GenerateName: "fairy-rpc-75d6d4d9fc-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fairy-rpc-75d6d4d9fc-hx777",
        UID: "5315eb75-2281-11e8-8162-00163e100620",
        ResourceVersion: "11934881",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fairy",
          "pod-template-hash": "3182808597",
          "tier": "rpc",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fairy-rpc-75d6d4d9fc\",\"uid\":\"53122758-2281-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11934744\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fairy-rpc-75d6d4d9fc",
            UID: "53122758-2281-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy:ea80d10c",
            Command: nil,
            Args: []string{
              "sea",
              "s",
            },
            WorkingDir: "",
            Ports: []v1.ContainerPort{
              v1.ContainerPort{
                Name: "",
                HostPort: 0,
                ContainerPort: 6000,
                Protocol: "TCP",
                HostIP: "",
              },
            },
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "python",
                    "health_check.py",
                    "liveness",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 15,
              TimeoutSeconds: 1,
              PeriodSeconds: 20,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            ReadinessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "python",
                    "health_check.py",
                    "readiness",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 5,
              TimeoutSeconds: 1,
              PeriodSeconds: 10,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.42",
        PodIP: "172.16.6.153",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy:ea80d10c",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy@sha256:9fbe171c3f540a5b702ce823c7008fc7b19666855932ae979e5cfc8979c3c8fd",
            ContainerID: "docker://d57d2157121c0439116b98d4bcefc95278f9f5f22cf9807174f6476a15220512",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-shell-6fcc57bdbd-s6n68",
        GenerateName: "fairy-shell-6fcc57bdbd-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fairy-shell-6fcc57bdbd-s6n68",
        UID: "596635f5-2281-11e8-8162-00163e100620",
        ResourceVersion: "11934897",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fairy",
          "pod-template-hash": "2977136868",
          "tier": "shell",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fairy-shell-6fcc57bdbd\",\"uid\":\"5963067f-2281-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11934831\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fairy-shell-6fcc57bdbd",
            UID: "5963067f-2281-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy-shell:ea80d10c",
            Command: nil,
            Args: []string{
              "journalctl",
              "-f",
            },
            WorkingDir: "",
            Ports: nil,
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: nil,
            ReadinessProbe: nil,
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.42",
        PodIP: "172.16.6.154",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy-shell:ea80d10c",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fairy-shell@sha256:ace318b77cc89bd3f0b8f53b437ae73c256fcf3a26cc4e4d8645b1362ff475a6",
            ContainerID: "docker://1844de4a81ccb85fe76307297457993e8605d76d311012040d216db59f3d6f3d",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-webadm-5ccc4ff857-cm8sj",
        GenerateName: "fairy-webadm-5ccc4ff857-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fairy-webadm-5ccc4ff857-cm8sj",
        UID: "1d6b835a-21d9-11e8-8162-00163e100620",
        ResourceVersion: "11777454",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fairy",
          "pod-template-hash": "1777099413",
          "tier": "webadm",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fairy-webadm-5ccc4ff857\",\"uid\":\"1d66e216-21d9-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11777424\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fairy-webadm-5ccc4ff857",
            UID: "1d66e216-21d9-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/webadm-fairy:b3366a67-integration",
            Command: nil,
            Args: nil,
            WorkingDir: "",
            Ports: []v1.ContainerPort{
              v1.ContainerPort{
                Name: "",
                HostPort: 0,
                ContainerPort: 4000,
                Protocol: "TCP",
                HostIP: "",
              },
            },
            EnvFrom: nil,
            Env: nil,
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: nil,
                HTTPGet: &v1.HTTPGetAction{
                  Path: "/healthz",
                  Port: intstr.IntOrString{
                    Type: 0,
                    IntVal: 4000,
                    StrVal: "",
                  },
                  Host: "",
                  Scheme: "HTTP",
                  HTTPHeaders: nil,
                },
                TCPSocket: nil,
              },
              InitialDelaySeconds: 0,
              TimeoutSeconds: 1,
              PeriodSeconds: 10,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            ReadinessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: nil,
                HTTPGet: &v1.HTTPGetAction{
                  Path: "/healthz",
                  Port: intstr.IntOrString{
                    Type: 0,
                    IntVal: 4000,
                    StrVal: "",
                  },
                  Host: "",
                  Scheme: "HTTP",
                  HTTPHeaders: nil,
                },
                TCPSocket: nil,
              },
              InitialDelaySeconds: 0,
              TimeoutSeconds: 1,
              PeriodSeconds: 10,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.42",
        PodIP: "172.16.6.112",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/webadm-fairy:b3366a67-integration",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/webadm-fairy@sha256:08dcb12b1e1eefca0a43cc5ceac94cd1eeb0d556cabc7c5df3136d271cc3a9c8",
            ContainerID: "docker://96f140803cb9d5065621ee28f89a9409cf4ca41584a429566e8b5c7d9abc4a4d",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-api-5d447895b7-szl8x",
        GenerateName: "fennec-api-5d447895b7-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fennec-api-5d447895b7-szl8x",
        UID: "42ec4d54-2280-11e8-8162-00163e100620",
        ResourceVersion: "11933693",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fennec",
          "pod-template-hash": "1800345163",
          "tier": "api",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fennec-api-5d447895b7\",\"uid\":\"42e9e53e-2280-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11933644\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fennec-api-5d447895b7",
            UID: "42e9e53e-2280-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/m2-fennec:ccf9c094",
            Command: nil,
            Args: []string{
              "node",
              "app.js",
            },
            WorkingDir: "",
            Ports: []v1.ContainerPort{
              v1.ContainerPort{
                Name: "",
                HostPort: 0,
                ContainerPort: 5000,
                Protocol: "TCP",
                HostIP: "",
              },
            },
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "NODE_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
              v1.EnvVar{
                Name: "GRPC_HOST",
                Value: "",
                ValueFrom: &v1.EnvVarSource{
                  FieldRef: &v1.ObjectFieldSelector{
                    APIVersion: "v1",
                    FieldPath: "status.hostIP",
                  },
                  ResourceFieldRef: nil,
                  ConfigMapKeyRef: nil,
                  SecretKeyRef: nil,
                },
              },
              v1.EnvVar{
                Name: "GRPC_PORT",
                Value: "6000",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "npm",
                    "run",
                    "healthz",
                    "liveness",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 0,
              TimeoutSeconds: 1,
              PeriodSeconds: 10,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            ReadinessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "npm",
                    "run",
                    "healthz",
                    "readiness",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 5,
              TimeoutSeconds: 1,
              PeriodSeconds: 10,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf66kqjv3d5k23lvm7oo",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.38",
        PodIP: "172.16.3.78",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/m2-fennec:ccf9c094",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/m2-fennec@sha256:165c30591abc1baa241fef5128c1774a5cf2125c303cdb0fc58a8a1a9e283213",
            ContainerID: "docker://0b6d55164076ce61ec337bb8e5adbd3978eec1b7287f103f85c4c97872fdaa6b",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-celery-5b8f68745d-88tl9",
        GenerateName: "fennec-celery-5b8f68745d-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fennec-celery-5b8f68745d-88tl9",
        UID: "455b5d58-21ee-11e8-8162-00163e100620",
        ResourceVersion: "11798079",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fennec",
          "pod-template-hash": "1649243018",
          "tier": "celery",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fennec-celery-5b8f68745d\",\"uid\":\"4558d003-21ee-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11797917\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fennec-celery-5b8f68745d",
            UID: "4558d003-21ee-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec:ea71cb05",
            Command: nil,
            Args: []string{
              "sea",
              "celery",
              "worker",
              "-c",
              "1",
              "-n",
              "fennec@%h",
              "--without-mingle",
              "--without-gossip",
              "--loglevel=debug",
            },
            WorkingDir: "",
            Ports: nil,
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "/bin/bash",
                    "-c",
                    "sea celery inspect ping -d fennec@$HOSTNAME",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 10,
              TimeoutSeconds: 10,
              PeriodSeconds: 30,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            ReadinessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "/bin/bash",
                    "-c",
                    "sea celery inspect ping -d fennec@$HOSTNAME",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 10,
              TimeoutSeconds: 10,
              PeriodSeconds: 20,
              SuccessThreshold: 2,
              FailureThreshold: 2,
            },
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.42",
        PodIP: "172.16.6.127",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec:ea71cb05",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec@sha256:ad655e96aba44abc1311bf26d45695f9278c585d31ac88ed289b5f370e629e5b",
            ContainerID: "docker://6a1fe819382e963ba6b36e86610648135088a75e4f70cf75912e93301096c435",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-celery-85b5948754-g65xx",
        GenerateName: "fennec-celery-85b5948754-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fennec-celery-85b5948754-g65xx",
        UID: "dd3b8581-2293-11e8-8162-00163e100620",
        ResourceVersion: "11952674",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fennec",
          "pod-template-hash": "4161504310",
          "tier": "celery",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fennec-celery-85b5948754\",\"uid\":\"dd387886-2293-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11952548\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fennec-celery-85b5948754",
            UID: "dd387886-2293-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec:df5636b6",
            Command: nil,
            Args: []string{
              "sea",
              "celery",
              "worker",
              "-c",
              "1",
              "-n",
              "fennec@%h",
              "--without-mingle",
              "--without-gossip",
              "--loglevel=debug",
            },
            WorkingDir: "",
            Ports: nil,
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "/bin/bash",
                    "-c",
                    "sea celery inspect ping -d fennec@$HOSTNAME",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 10,
              TimeoutSeconds: 10,
              PeriodSeconds: 30,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            ReadinessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "/bin/bash",
                    "-c",
                    "sea celery inspect ping -d fennec@$HOSTNAME",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 10,
              TimeoutSeconds: 10,
              PeriodSeconds: 20,
              SuccessThreshold: 2,
              FailureThreshold: 2,
            },
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf66kqjv3d5k23lvm7on",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "False",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "ContainersNotReady",
            Message: "containers with unready status: [app]",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.39",
        PodIP: "172.16.4.110",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: false,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec:df5636b6",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec@sha256:7f7ada54443c9f8eca08751811a1a4d7760da44a3ea44716598bccf5cc5a2315",
            ContainerID: "docker://9e1f898a11e3df6a36a15306def7ea35190d2191b4326a0902a0d247d93b281d",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-rpc-5dccfd56d9-42sg2",
        GenerateName: "fennec-rpc-5dccfd56d9-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fennec-rpc-5dccfd56d9-42sg2",
        UID: "db4462ff-2293-11e8-8162-00163e100620",
        ResourceVersion: "11952587",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fennec",
          "pod-template-hash": "1877981285",
          "tier": "rpc",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fennec-rpc-5dccfd56d9\",\"uid\":\"db40e9cf-2293-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11952520\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fennec-rpc-5dccfd56d9",
            UID: "db40e9cf-2293-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec:df5636b6",
            Command: nil,
            Args: []string{
              "sea",
              "s",
            },
            WorkingDir: "",
            Ports: []v1.ContainerPort{
              v1.ContainerPort{
                Name: "",
                HostPort: 0,
                ContainerPort: 6000,
                Protocol: "TCP",
                HostIP: "",
              },
            },
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "python",
                    "health_check.py",
                    "liveness",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 15,
              TimeoutSeconds: 1,
              PeriodSeconds: 20,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            ReadinessProbe: &v1.Probe{
              Handler: v1.Handler{
                Exec: &v1.ExecAction{
                  Command: []string{
                    "python",
                    "health_check.py",
                    "readiness",
                  },
                },
                HTTPGet: nil,
                TCPSocket: nil,
              },
              InitialDelaySeconds: 5,
              TimeoutSeconds: 1,
              PeriodSeconds: 10,
              SuccessThreshold: 1,
              FailureThreshold: 3,
            },
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.42",
        PodIP: "172.16.6.159",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec:df5636b6",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec@sha256:7f7ada54443c9f8eca08751811a1a4d7760da44a3ea44716598bccf5cc5a2315",
            ContainerID: "docker://dc661a20671d363c2ece288e6dbd0e0d1abd13a5503be458c57898b47820766f",
          },
        },
        QOSClass: "Burstable",
      },
    },
    v1.Pod{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-shell-768c468f7d-4m25t",
        GenerateName: "fennec-shell-768c468f7d-",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/pods/fennec-shell-768c468f7d-4m25t",
        UID: "457736b5-21ee-11e8-8162-00163e100620",
        ResourceVersion: "11798016",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
          "app": "fennec",
          "pod-template-hash": "3247024938",
          "tier": "shell",
        },
        Annotations: map[string]string{
          "kubernetes.io/created-by": "{\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"douya\",\"name\":\"fennec-shell-768c468f7d\",\"uid\":\"45740f98-21ee-11e8-8162-00163e100620\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"11797946\"}}\n",
        },
        OwnerReferences: []v1.OwnerReference{
          v1.OwnerReference{
            APIVersion: "extensions/v1beta1",
            Kind: "ReplicaSet",
            Name: "fennec-shell-768c468f7d",
            UID: "45740f98-21ee-11e8-8162-00163e100620",
            Controller: &true,
            BlockOwnerDeletion: &true,
          },
        },
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Spec: v1.PodSpec{
        Volumes: []v1.Volume{
          v1.Volume{
            Name: "default-token-h6np4",
            VolumeSource: v1.VolumeSource{
              HostPath: nil,
              EmptyDir: nil,
              GCEPersistentDisk: nil,
              AWSElasticBlockStore: nil,
              GitRepo: nil,
              Secret: &v1.SecretVolumeSource{
                SecretName: "default-token-h6np4",
                Items: nil,
                DefaultMode: &420,
                Optional: nil,
              },
              NFS: nil,
              ISCSI: nil,
              Glusterfs: nil,
              PersistentVolumeClaim: nil,
              RBD: nil,
              FlexVolume: nil,
              Cinder: nil,
              CephFS: nil,
              Flocker: nil,
              DownwardAPI: nil,
              FC: nil,
              AzureFile: nil,
              ConfigMap: nil,
              VsphereVolume: nil,
              Quobyte: nil,
              AzureDisk: nil,
              PhotonPersistentDisk: nil,
              Projected: nil,
              PortworxVolume: nil,
              ScaleIO: nil,
              StorageOS: nil,
            },
          },
        },
        InitContainers: nil,
        Containers: []v1.Container{
          v1.Container{
            Name: "app",
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec-shell:ea71cb05",
            Command: nil,
            Args: []string{
              "journalctl",
              "-f",
            },
            WorkingDir: "",
            Ports: nil,
            EnvFrom: nil,
            Env: []v1.EnvVar{
              v1.EnvVar{
                Name: "SEA_ENV",
                Value: "integration",
                ValueFrom: nil,
              },
            },
            Resources: v1.ResourceRequirements{
              Limits: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
              Requests: v1.ResourceList{
                "cpu": resource.Quantity{
                  Format: "DecimalSI",
                },
                "memory": resource.Quantity{
                  Format: "BinarySI",
                },
              },
            },
            VolumeMounts: []v1.VolumeMount{
              v1.VolumeMount{
                Name: "default-token-h6np4",
                ReadOnly: true,
                MountPath: "/var/run/secrets/kubernetes.io/serviceaccount",
                SubPath: "",
                MountPropagation: nil,
              },
            },
            VolumeDevices: nil,
            LivenessProbe: nil,
            ReadinessProbe: nil,
            Lifecycle: nil,
            TerminationMessagePath: "/dev/termination-log",
            TerminationMessagePolicy: "File",
            ImagePullPolicy: "IfNotPresent",
            SecurityContext: nil,
            Stdin: false,
            StdinOnce: false,
            TTY: false,
          },
        },
        RestartPolicy: "Always",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds: nil,
        DNSPolicy: "ClusterFirst",
        NodeSelector: map[string]string{
        },
        ServiceAccountName: "default",
        DeprecatedServiceAccount: "default",
        AutomountServiceAccountToken: nil,
        NodeName: "cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
        HostNetwork: false,
        HostPID: false,
        HostIPC: false,
        ShareProcessNamespace: nil,
        SecurityContext: &v1.PodSecurityContext{
          SELinuxOptions: nil,
          RunAsUser: nil,
          RunAsGroup: nil,
          RunAsNonRoot: nil,
          SupplementalGroups: nil,
          FSGroup: nil,
        },
        ImagePullSecrets: []v1.LocalObjectReference{
          v1.LocalObjectReference{
            Name: "dockersecret",
          },
        },
        Hostname: "",
        Subdomain: "",
        Affinity: nil,
        SchedulerName: "default-scheduler",
        Tolerations: []v1.Toleration{
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/notReady",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
          v1.Toleration{
            Key: "node.alpha.kubernetes.io/unreachable",
            Operator: "Exists",
            Value: "",
            Effect: "NoExecute",
            TolerationSeconds: &300,
          },
        },
        HostAliases: nil,
        PriorityClassName: "",
        Priority: nil,
        DNSConfig: nil,
      },
      Status: v1.PodStatus{
        Phase: "Running",
        Conditions: []v1.PodCondition{
          v1.PodCondition{
            Type: "Initialized",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "Ready",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
          v1.PodCondition{
            Type: "PodScheduled",
            Status: "True",
            LastProbeTime: v1.Time{
              Time: time.Time{},
            },
            LastTransitionTime: v1.Time{
              Time: time.Time{},
            },
            Reason: "",
            Message: "",
          },
        },
        Message: "",
        Reason: "",
        NominatedNodeName: "",
        HostIP: "192.168.8.42",
        PodIP: "172.16.6.128",
        StartTime: &v1.Time{
          Time: time.Time{},
        },
        InitContainerStatuses: nil,
        ContainerStatuses: []v1.ContainerStatus{
          v1.ContainerStatus{
            Name: "app",
            State: v1.ContainerState{
              Waiting: nil,
              Running: &v1.ContainerStateRunning{
                StartedAt: v1.Time{
                  Time: time.Time{},
                },
              },
              Terminated: nil,
            },
            LastTerminationState: v1.ContainerState{
              Waiting: nil,
              Running: nil,
              Terminated: nil,
            },
            Ready: true,
            RestartCount: 0,
            Image: "registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec-shell:ea71cb05",
            ImageID: "docker-pullable://registry.cn-hangzhou.aliyuncs.com/shanbayapp/backend-fennec-shell@sha256:bfe7fd0286b53b19b3dd24bd874973a20e5981d1134b81d42338d4b5842ecd68",
            ContainerID: "docker://c7e0caca7856724d8f436c76ac4e8a601a4b1519c6573c3d93dedc9aeb5de94b",
          },
        },
        QOSClass: "Burstable",
      },
    },
  },
}
&v1.EndpointsList{
  TypeMeta: v1.TypeMeta{
    Kind: "",
    APIVersion: "",
  },
  ListMeta: v1.ListMeta{
    SelfLink: "/api/v1/namespaces/douya/endpoints",
    ResourceVersion: "11952686",
    Continue: "",
  },
  Items: []v1.Endpoints{
    v1.Endpoints{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-api",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/endpoints/fairy-api",
        UID: "9a14e857-019d-11e8-8644-00163e04ab00",
        ResourceVersion: "11589052",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Subsets: []v1.EndpointSubset{
        v1.EndpointSubset{
          Addresses: []v1.EndpointAddress{
            v1.EndpointAddress{
              IP: "172.16.6.90",
              Hostname: "",
              NodeName: &"cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
              TargetRef: &v1.ObjectReference{
                Kind: "Pod",
                Namespace: "douya",
                Name: "fairy-api-854487bd8f-gxzwl",
                UID: "c6151dbf-210e-11e8-8162-00163e100620",
                APIVersion: "",
                ResourceVersion: "11589045",
                FieldPath: "",
              },
            },
          },
          NotReadyAddresses: nil,
          Ports: []v1.EndpointPort{
            v1.EndpointPort{
              Name: "http",
              Port: 5000,
              Protocol: "TCP",
            },
          },
        },
      },
    },
    v1.Endpoints{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-celery",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/endpoints/fairy-celery",
        UID: "0f8a6223-f9ba-11e7-acb9-00163e100027",
        ResourceVersion: "1714151",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Subsets: nil,
    },
    v1.Endpoints{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-rpc",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/endpoints/fairy-rpc",
        UID: "cab2bb38-f9c1-11e7-acb9-00163e100027",
        ResourceVersion: "11934889",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Subsets: []v1.EndpointSubset{
        v1.EndpointSubset{
          Addresses: []v1.EndpointAddress{
            v1.EndpointAddress{
              IP: "172.16.6.153",
              Hostname: "",
              NodeName: &"cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
              TargetRef: &v1.ObjectReference{
                Kind: "Pod",
                Namespace: "douya",
                Name: "fairy-rpc-75d6d4d9fc-hx777",
                UID: "5315eb75-2281-11e8-8162-00163e100620",
                APIVersion: "",
                ResourceVersion: "11934881",
                FieldPath: "",
              },
            },
          },
          NotReadyAddresses: nil,
          Ports: []v1.EndpointPort{
            v1.EndpointPort{
              Name: "grpc",
              Port: 6000,
              Protocol: "TCP",
            },
          },
        },
      },
    },
    v1.Endpoints{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fairy-webadm",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/endpoints/fairy-webadm",
        UID: "8d43fdf8-0589-11e8-b516-00163e100620",
        ResourceVersion: "11777460",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Subsets: []v1.EndpointSubset{
        v1.EndpointSubset{
          Addresses: []v1.EndpointAddress{
            v1.EndpointAddress{
              IP: "172.16.6.112",
              Hostname: "",
              NodeName: &"cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
              TargetRef: &v1.ObjectReference{
                Kind: "Pod",
                Namespace: "douya",
                Name: "fairy-webadm-5ccc4ff857-cm8sj",
                UID: "1d6b835a-21d9-11e8-8162-00163e100620",
                APIVersion: "",
                ResourceVersion: "11777454",
                FieldPath: "",
              },
            },
          },
          NotReadyAddresses: nil,
          Ports: []v1.EndpointPort{
            v1.EndpointPort{
              Name: "http",
              Port: 5000,
              Protocol: "TCP",
            },
          },
        },
      },
    },
    v1.Endpoints{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-api",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/endpoints/fennec-api",
        UID: "23661e2f-21ec-11e8-8162-00163e100620",
        ResourceVersion: "11933701",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Subsets: []v1.EndpointSubset{
        v1.EndpointSubset{
          Addresses: []v1.EndpointAddress{
            v1.EndpointAddress{
              IP: "172.16.3.78",
              Hostname: "",
              NodeName: &"cn-shanghai.i-uf66kqjv3d5k23lvm7oo",
              TargetRef: &v1.ObjectReference{
                Kind: "Pod",
                Namespace: "douya",
                Name: "fennec-api-5d447895b7-szl8x",
                UID: "42ec4d54-2280-11e8-8162-00163e100620",
                APIVersion: "",
                ResourceVersion: "11933693",
                FieldPath: "",
              },
            },
          },
          NotReadyAddresses: nil,
          Ports: []v1.EndpointPort{
            v1.EndpointPort{
              Name: "http",
              Port: 5000,
              Protocol: "TCP",
            },
          },
        },
      },
    },
    v1.Endpoints{
      TypeMeta: v1.TypeMeta{
        Kind: "",
        APIVersion: "",
      },
      ObjectMeta: v1.ObjectMeta{
        Name: "fennec-rpc",
        GenerateName: "",
        Namespace: "douya",
        SelfLink: "/api/v1/namespaces/douya/endpoints/fennec-rpc",
        UID: "2352982d-21ec-11e8-8162-00163e100620",
        ResourceVersion: "11952595",
        Generation: 0,
        CreationTimestamp: v1.Time{
          Time: time.Time{},
        },
        DeletionTimestamp: nil,
        DeletionGracePeriodSeconds: nil,
        Labels: map[string]string{
        },
        Annotations: map[string]string{
        },
        OwnerReferences: nil,
        Initializers: nil,
        Finalizers: nil,
        ClusterName: "",
      },
      Subsets: []v1.EndpointSubset{
        v1.EndpointSubset{
          Addresses: []v1.EndpointAddress{
            v1.EndpointAddress{
              IP: "172.16.6.159",
              Hostname: "",
              NodeName: &"cn-shanghai.i-uf6ihaxtuoo0ukui4g5q",
              TargetRef: &v1.ObjectReference{
                Kind: "Pod",
                Namespace: "douya",
                Name: "fennec-rpc-5dccfd56d9-42sg2",
                UID: "db4462ff-2293-11e8-8162-00163e100620",
                APIVersion: "",
                ResourceVersion: "11952587",
                FieldPath: "",
              },
            },
          },
          NotReadyAddresses: nil,
          Ports: []v1.EndpointPort{
            v1.EndpointPort{
              Name: "grpc",
              Port: 6000,
              Protocol: "TCP",
            },
          },
        },
      },
    },
  },
}
